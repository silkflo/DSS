Balance <- c()
DF_Balance <- Stats()
#mutate(DF_Balance,ExitTime =  as.POSIXct(DF_Balance$ExitTime, format = "%Y-%m-%d %H:%M:%S", tz = "Africa/Cairo"))
DF_Balance <- DF_Balance %>% subset(select = -c(MagicNumber,Ticket,EntryTime,Type))
DF_Balance <- DF_Balance[order(DF_Balance$Symbol,decreasing = F),]
#group_by(DF_Balance,Stats()$Symbol)
#pair <- as.vector(unique(Stats()$Symbol))
for(i in  1:nrow(DF_Balance)){
if (i==1){
Balance[i] <- DF_Balance$Profit[i]
}else if(DF_Balance$Symbol[i] != DF_Balance$Symbol[i-1] && i>1){
Balance[i] <- DF_Balance$Profit[i]
}else{
Balance[i] <- DF_Balance$Profit[i]+ Balance[i-1]
}
}
DF_Balance <- DF_Balance %>%  mutate(Balance)
# DF_Balance[order(DF_Balance$Symbol,decreasing = F),]
#  DF_Balance[order(DF_Balance$ExitTime,decreasing = F),]
DF_Balance
})
DF_Balance_All <- reactive({
DF_Balance <- Stats()
DF_Balance <- DF_Balance %>% subset(select = -c(MagicNumber,Ticket,EntryTime,Type))
DF_Balance <- DF_Balance[order(DF_Balance$ExitTime,decreasing = F),]
Balance <- c()
for(i in  1:nrow(DF_Balance)){
if (i==1){
Balance[i] <- DF_Balance$Profit[i]
}else{
Balance[i] <- DF_Balance$Profit[i]+ Balance[i-1]
}
}
DF_Balance <- DF_Balance %>%  mutate(Balance)
})
#----------GRAPH TAB-----------------
output$profitGraph <- renderPlotly({
if(file.exists(file_path())&& nrow(Stats()>0)){
color <- c("red", "black", "blue","green","orange","purple", "pink","cornflowerblue", "darkgreen","indianred3","magenta","mediumpurple3", "midnightblue","orchid4","palegreen","skyblue","slateblue4", "tomato1")
colorList <- vector("list",length(pair()))
for (i in 1 : length(pair())){
Ps <- list(target = pair()[i], value = list(marker =list(color = sample(color,1))))
colorList[[i]] <- Ps
}
if(input$MagicNum == "All"){
graph <-  plot_ly(
type = 'scatter',
x = Stats()$ExitTime,
y = Stats()$Profit,
text = paste("<br>Time: ", Stats()$ExitTime,
"<br>Profit: ", Stats()$Profit,
"<br>Symbol: ", Stats()$Symbol),
hoverinfo = 'text',
mode = 'markers',
transforms = list(
list(
type = 'groupby',
groups = Stats()$Symbol,
styles = colorList)))
}else
{
plot_ly(
x = Stats()$ExitTime,
y = Stats()$Profit,
type = "scatter",
mode = 'markers',
marker = list(color = sample(color,1)),
name = paste0(input$Symbol," PROFIT"))
}
}
})
output$balanceGraph <- renderPlotly({
if(file.exists(file_path()) && nrow(DF_Balance()>0)){
color <- c("red", "black", "blue","green","orange","purple", "pink","cornflowerblue", "darkgreen","indianred3","magenta","mediumpurple3", "midnightblue","orchid4","palegreen","skyblue","slateblue4", "tomato1")
colorList <- vector("list",length(pair()))
for (i in 1 : length(pair())){
Ps <- list(target = pair()[i], value = list(line =list(color = sample(color,1))))
colorList[[i]] <- Ps
}
graph <-  plot_ly(
type = 'scatter',
x = DF_Balance()$ExitTime,
y = DF_Balance()$Balance,
text = paste("<br>Time: ", DF_Balance()$ExitTime,
"<br>Balance: ", DF_Balance()$Balance,
"<br>Symbol: ", DF_Balance()$Symbol),
hoverinfo = 'text',
mode = 'lines',
transforms = list(
list(
type = 'groupby',
groups = DF_Balance()$Symbol,
styles = colorList)))
}
})
#------------ACCOUNT TAB--------------
accountResults <- reactive({
if(file.exists(account_path())){
df_AR <- readr::read_rds(account_path())
df_AR <-  data.frame(DateTime =df_AR$DateTime,
Balance = df_AR$Balance,
Equity = df_AR$Equity,
Profit = df_AR$Profit
)
df_AR <- df_AR%>%filter(DateTime >= input$From, DateTime <= paste0(input$To," 23:59:59"))
} else{"NO DATA"}
})
output$watchDogReport <- DT::renderDataTable({
if(file.exists(account_path())){
df_AR <-  data.frame(DateTime =as.character(accountResults()$DateTime),
Balance = accountResults()$Balance,
Equity = accountResults()$Equity,
Profit = accountResults()$Profit)
datatable(df_AR,class = 'cell-border stripe', rownames = FALSE, filter = 'top', options = list(
pageLength = 10, autoWidth = TRUE))
}else{"NO DATA"}
})
output$equityGraph <- renderPlotly({
if(file.exists(account_path())){
graph <-  plot_ly(
type = 'scatter',
x = accountResults()$DateTime,
y = accountResults()$Balance,
text = paste("<br>Time: ", accountResults()$DateTime,
"<br>Balance: ", accountResults()$Balance),
hoverinfo = 'text',
mode = 'lines',
name = 'Balance',
line = list(color = 'blue'))
graph <- graph %>% add_trace(
type = 'scatter',
x = accountResults()$DateTime,
y = accountResults()$Equity,
text = paste("<br>Time: ", accountResults()$DateTime,
"<br>Equity: ", accountResults()$Equity),
hoverinfo = 'text',
mode = 'lines',
name = 'Equity',
line = list(color = 'red')
)
}
})
#-------REPORT TAB-----------------
buyProfit <- reactive({
if(input$MagicNum == "All"){
allProfit <-  Stats()  %>%
group_by(Type) %>%
filter(Type == 0) %>%
summarise( Profit = sum(Profit)) %>%
select(-c(Type)) %>%
mutate(Symbol = "ALL PAIR")
buyProfit <-  Stats()  %>%
group_by(Symbol, Type) %>%
filter(Type == 0) %>%
summarise( Profit = sum(Profit)) %>%
subset(select = c(Symbol,Profit)) %>%
rbind(allProfit)
} else{
buyProfit <-  Stats()  %>%
group_by(Symbol, Type) %>%
summarise( Profit = sum(Profit)) %>%
filter(Type == 0) %>%
subset(select = c(Symbol,Profit))
}
})
sellProfit <- reactive({
if(input$MagicNum == "All"){
allProfit <-  Stats()  %>%
group_by(Type) %>%
filter(Type == 1) %>%
summarise( Profit = sum(Profit)) %>%
select(-c(Type)) %>%
mutate(Symbol = "ALL PAIR")
sellProfit <- Stats()  %>%
group_by(Symbol, Type) %>%
filter(Type == 1) %>%
summarise( Profit = sum(Profit)) %>%
subset(select = c(Symbol,Profit)) %>%
rbind(allProfit)
} else{
sellProfit <- Stats()  %>%
group_by(Symbol, Type) %>%
filter(Type == 1) %>%
summarise( Profit = sum(Profit)) %>%
subset(select = c(Symbol,Profit))
}
})
buyTrade <- reactive({
if(input$MagicNum == "All"){
allTrade <-  Stats()  %>%
group_by(Type) %>%
filter(Type == 0) %>%
summarise( Buy_Trade = n()) %>%
select(-c(Type)) %>%
mutate(Symbol = "ALL PAIR")
buyTrade <- Stats()  %>%
group_by(Symbol, Type) %>%
filter(Type == 0) %>%
summarise( Buy_Trade = n()) %>%
subset(select = c(Symbol,Buy_Trade)) %>%
rbind(allTrade)
} else{
buyTrade <- Stats()  %>%
group_by(Symbol, Type) %>%
summarise(Buy_Trade = n()) %>%
filter(Type == 0) %>%
subset(select = c(Symbol,Buy_Trade))
}
})
sellTrade <- reactive({
if(input$MagicNum == "All"){
allTrade <-  Stats()  %>%
group_by(Type) %>%
filter(Type == 1) %>%
summarise( Sell_Trade = n()) %>%
select(-c(Type)) %>%
mutate(Symbol = "ALL PAIR")
sellTrade <- Stats()  %>%
group_by(Symbol, Type) %>%
filter(Type == 1) %>%
summarise( Sell_Trade = n()) %>%
subset(select = c(Symbol,Sell_Trade)) %>%
rbind(allTrade)
} else{
sellTrade <- Stats()  %>%
group_by(Symbol, Type) %>%
filter(Type == 1) %>%
summarise(Sell_Trade = n()) %>%
subset(select = c(Symbol,Sell_Trade))
}
})
output$result <- DT::renderDataTable({
if(file.exists(file_path())&&nrow(Stats())>0){
DF_allPair <- DF_Balance_All()
allPair <- round(DF_allPair[nrow(DF_allPair),4],2)
final_Balance  <- vector("numeric", length(pair()))
for (i in 1: length(pair())){
pairBalance <-  DF_Balance() %>% filter(Symbol == pair()[i])
final_Balance[i]  <- round(pairBalance[nrow(pairBalance),4],2)
}
Final_Balance <- data.frame(Symbol = pair(),
Final_Balance = final_Balance)
if(input$MagicNum == "All"){
All_Pair <- c("ALL PAIR", allPair)
Final_Balance <- rbind(Final_Balance,All_Pair)
Final_Balance <- left_join(x = Final_Balance,y = buyProfit(), by = "Symbol")
Final_Balance <- left_join(x = Final_Balance,y = sellProfit(), by = "Symbol")
Final_Balance <- left_join(x = Final_Balance, y = buyTrade(),by = "Symbol")
Final_Balance <- left_join(x = Final_Balance, y = sellTrade(),by = "Symbol")
}else{
Final_Balance <- left_join(x = Final_Balance,y = buyProfit(), by = "Symbol")
Final_Balance <- left_join(x = Final_Balance,y = sellProfit(), by = "Symbol")
Final_Balance <- left_join(x = Final_Balance, y = buyTrade(),by = "Symbol")
Final_Balance <- left_join(x = Final_Balance, y = sellTrade(),by = "Symbol")
}
FB <- as.data.frame(Final_Balance)
FB[is.na(FB)] <- 0
FB <- FB %>% cbind(FB$Buy_Trade + FB$Sell_Trade) %>%
set_names(c("Symbol","Final_Balance","Buy_Profit","Sell_Profit","Buy_Trade","Sell_Trade", "Total_Trade"))
datatable(FB,class = 'cell-border stripe', rownames = FALSE, filter = 'top', options = list(
pageLength = 28, autoWidth = TRUE))
}
})
output$profitFactor <- renderText({
if(file.exists(file_path()) && nrow(Stats())>0){
negProfit <- Stats()%>%filter(Profit<0)%>%select(Profit)%>%summarise(Loss = abs(sum(Profit)))
posProfit <- Stats()%>%filter(Profit>0)%>%select(Profit)%>%summarise(Gain = abs(sum(Profit)))
if(negProfit == 0 ){"Only Gain"}
else if (posProfit == 0){"Only Loss"}
else{as.double(round( posProfit/(0.001+negProfit),2))}
}else{
"NO DATA"
}
})
output$maxProfit <- renderText({
if(file.exists(file_path())&&nrow(Stats())>0){max(Stats()$Profit)}
else{"NO DATA"}
})
output$minProfit <- renderText({
if(file.exists(file_path())&&nrow(Stats())>0){min(Stats()$Profit)}
else{"NO DATA"}
})
output$totalTrade <- renderText({
if(file.exists(file_path())){
nrow(Stats())}
else{"NO DATA"}
})
output$totalProfit <- renderText({
if(nrow(DF_Balance_All())>0){
DF_allPair <- DF_Balance_All()
round(DF_allPair[nrow(DF_allPair),4],2)
}else{"0"}
})
account_path <- reactive({
#  Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
#  file_path <- paste0(Terminals,"/OrdersResultsT",1,".csv")
pathDSS <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
paste0(pathDSS,"/_DATA/AccountResultsT",input$Terminal,".rds")
})
###################################################################
####################### - MT INSPECTION - #########################
###################################################################
#######VIEW TAB####################
output$marketType <- renderText({
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
file_path <- paste0(Terminals,paste0('/AI_MarketType_',input$SymbolMT,'60.csv'))
MT <- read.csv(file_path,col.names = c("MT","Prediction"))
MTString <- toString(MT$MT)
PredictionString <- toString(MT$Prediction)
paste(MTString," ", PredictionString)
})
#graphs and outputs
output$closePrice <- renderPlotly({
# generate bins based on input$bins from ui.R
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
CP <-readr::read_rds(file.path(path_data,  paste0('AI_RSIADX',input$SymbolMT,'60.rds')))
toRow <- input$rows + 63
graph <-  plot_ly(
type = 'scatter',
x = CP$X1[input$rows:toRow],
y = CP$X2[input$rows:toRow],
mode = 'lines',
name = 'Market Type',
line = list(color = 'red'))
})
output$closePriceTable <- DT::renderDataTable({
#  print(input$rows+64)
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
CP <-readr::read_rds(file.path(path_data,  paste0('AI_RSIADX',input$SymbolMT,'60.rds')))
toRow <- input$rows + 63
CPDF <-  data.frame( Date =as.character(CP$X1),
Close_price = format(round(CP$X2,5), nsmall = 5))
CPDF <- CPDF[order(c(input$rows:toRow),decreasing = TRUE),]
datatable(CPDF,class = 'cell-border stripe', rownames = FALSE, filter = 'top', options = list(
pageLength = 64, autoWidth = TRUE))
})
#############STAT TAB######################
PairID_DF <- reactive({
pair <- c("AUDCAD","AUDCHF","AUDJPY","AUDNZD","AUDUSD","CADCHF","CADJPY","CHFJPY","EURAUD","EURCAD","EURCHF","EURGBP","EURJPY","EURNZD","EURUSD","GBPAUD","GBPCAD","GBPCHF","GBPJPY","GBPNZD","GBPUSD","NZDCAD","NZDCHF","NZDJPY","NZDUSD","USDCAD","USDCHF","USDJPY")
pairId <- c("00",	"01",	"02",	"03",	"04",	"05",	"06",	"07",	"08",	"09",	"10",	"11",	"12",	"13",	"14",	"15",	"16",	"17",	"18",	"19",	"20",	"21",	"22",	"23",	"24",	"25",	"26",	"27")
PairID_DF <- data.frame(pair,pairId)
})
pathControl <- reactive({
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
pairID <- PairID_DF() %>% filter(pair == input$SymbolMT)
pair <- pairID[2]
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_T1 <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
OrderResultPath <- paste0(path_T1,"/OrdersResultsT1.csv")
OrderResult <- read.csv(OrderResultPath, header = FALSE)
OrderResult <- OrderResult%>%select(V1,V6)%>%unique()
MagicNumber <- OrderResult %>%
filter(V6 == input$SymbolMT) %>%
select(V1)
getMN <- MagicNumber%>%pull(V1)
pathControl <- paste0(path_user,"/_DATA/control/",getMN,".rds")
})
output$controlGraph <- renderPlot({
if(file.exists(pathControl())){
print("file exist")
controlData <- readRDS(pathControl())
control <-c(controlData$alpha,controlData$gamma,controlData$epsilon)
controlData <- data.frame(control)
ggplot(controlData, aes(x=3, y=controlData[,1])) +
geom_point(
color="black",
fill="#69b3a2",
shape=22,
alpha=0.5,
size=6,
stroke = 1
) +
theme_ipsum()
}
})
###################################################################
####################### - MODEL INSPECTION - ######################
###################################################################
readResult <- reactive({
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
file_path <- paste0(pathDSS,"/_DATA/analyse_resultM60.csv")
DF_Result <- readr::read_csv(file_path)
#Col.names = c("TR_Level","NB_hold","Symbol","MaxPerf","FrstQntlPerf"))
})
output$AnalyseResult <- DT::renderDataTable({
DF_Result <- data.frame(TR_Level = readResult()$TR_Level,
NB_hold = readResult()$NB_hold,
Symbol =readResult()$Symbol,
MaxPerf = format(round(readResult()$MaxPerf,2),nsmall=2),
FrstQntlPerf = format(round(readResult()$FrstQntlPerf,2),nsmall=2))
datatable(DF_Result,class = 'cell-border stripe', rownames = FALSE, filter = 'top', options = list(
pageLength = 10, autoWidth = TRUE))
})
dataResult <- reactive({
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
file_path <- paste0(pathDSS,"/_DATA/analyse_resultM60_data.csv")
DF_DataResult <- readr::read_csv(file_path)
})
output$dataRes <- DT::renderDataTable({
DF_Data_Result <- data.frame(PnL_NB = round(dataResult()$PnL_NB,5),
TotalTrades = dataResult()$TotalTrades,
TR_Level = dataResult()$TR_Level,
NB_hold = dataResult()$NB_hold,
Symbol = dataResult()$Symbol,
FinalOutcome = dataResult()$FinalOutcome)
datatable(DF_Data_Result,class = 'cell-border stripe', rownames = FALSE, filter = 'top', options = list(
pageLength = 10, autoWidth = TRUE))
})
output$strategyTestResults <- renderPlot({
ggplot(dataResult(), aes(x = NB_hold, y = PnL_NB,
#size = TotalTrades,
col = as.factor(Symbol)))+geom_point()+
ggtitle("Strategy Test results")
})
output$modelPerformance <- renderPlot({
ggplot(readResult(), aes(x = MaxPerf, y = Symbol,
col = TR_Level,
size = NB_hold))+geom_point()+
geom_vline(xintercept=0.001)+
scale_x_continuous()+
ggtitle("Model Performance")
})
observeEvent(input$RefreshM60,{
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_logs <- file.path(path_user, "_MODELS")
# file names
filesToAnalyse <-list.files(path = path_logs,
pattern = "-60.rds",
full.names=TRUE)
# aggregate all files into one
for (VAR in filesToAnalyse) {
# VAR <- filesToAnalyse[1]
if(!exists("dfres")){dfres <<- readr::read_rds(VAR)}  else {
dfres <<- readr::read_rds(VAR) %>% dplyr::bind_rows(dfres)
}
}
## Analysis of model quality records
# file names
filesToAnalyse1 <-list.files(path = path_logs,
pattern = "M60.csv",
full.names=TRUE)
# aggregate all files into one
for (VAR in filesToAnalyse1) {
# VAR <- filesToAnalyse1[1]
if(!exists("dfres1")){dfres1 <<- readr::read_csv(VAR)}  else {
dfres1 <<- readr::read_csv(VAR) %>% dplyr::bind_rows(dfres1)
}
}
write.csv(dfres1,paste0(path_user,"/_DATA/analyse_resultM60.csv"), row.names=FALSE)
write.csv(dfres,paste0(path_user,"/_DATA/analyse_resultM60_data.csv"), row.names=FALSE)
session$reload()
})
##################################################################################
############################# PERFORMANCE ########################################
##################################################################################
perf_log <- reactive({
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
file_path <- paste0(pathDSS,"/_LOGS/perf_logs60.rds")
perf_log <- readr::read_rds(file_path) %>%
filter(TimeTest >= input$FromCopy, TimeTest <= paste0(input$ToCopy," 23:59:59"))
})
observeEvent(input$From,{
updateDateInput(session,inputId = "FromCopy",label = NULL,value = input$From)
})
observeEvent(input$To,{
updateDateInput(session,inputId = "ToCopy",label = NULL,value = input$To)
})
output$perfLog <- DT::renderDataTable({
perfLog <- data.frame(TimeTest = as.character(perf_log()$TimeTest),
MeanPerf = round(perf_log()$MeanPerf,2),
Quantil = round(perf_log()$Quantil,2))
datatable(perfLog,class = 'cell-border stripe', rownames = FALSE, filter = 'top', options = list(
pageLength = 10, autoWidth = TRUE))
})
output$perfGraph <- renderPlotly({
perfLog <- data.frame(TimeTest = as.Date(perf_log()$TimeTest,"%Y-%m-%d", tz="GMT"),
MeanPerf = perf_log()$MeanPerf,
Quantil = perf_log()$Quantil)
fig <- perfLog %>% plot_ly(x = perfLog$TimeTest, type="candlestick",
open = perfLog$MeanPerf, close = perfLog$Quantil,
high = perfLog$MeanPerf, low =perfLog$Quantil,
text = paste("<br>Time: ", perfLog$TimeTest,
"<br>MeanPerf: ", perfLog$MeanPerf,
"<br>Quantile:",perfLog$Quantil)
)
fig <- fig %>% layout(title = list(text = "Open = MeanPerf - Close = Quantile", x = 0),
xaxis = list(rangeslider = list(visible = F)))
fig
})
#---------------END CODE------------------------------------------
output$console <- renderPrint({
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
file_path <- "C:/Program Files (x86)/AM MT4 - Terminal 1/MQL4/Files/AI_MarketType_EURNZD60.csv"
MT <- read.csv(file_path,col.names = c("MT","Prediction"))
print(MT)
})
}
# Run the application
shinyApp(ui = ui, server = server)
#TO DO
# Watchdog add AccountResultsT3
# make the app online probably using VPS as host
# golem
shiny::runApp('Monitor')
View(MagicNumber)
View(MagicNumber)
View(ntrolFileName)
View(OrderResult)
runApp('Monitor')
shiny::runApp('Monitor')
