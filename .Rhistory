source("C:/DSS/Function/log_RL_progress.R")
source("C:/DSS/Function/All_Path.R")
timeFrame <- 5
path_control_files <- Path()$pathControlFile
DFT2 <- try(import_data(trade_log_file = Path()$orderResultsT2,demo_mode = T),silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
time_start <- Sys.time()
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 1 #policy off
# i <- 2 #policy on
# i <- 3
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
time_end <- Sys.time()
#calculate total time difference in seconds
time_total <- difftime(time_end,time_start,units="sec")
#convert to numeric
as.double(time_total)
logs <- data.frame(dtm = Sys.time(), time2run = time_total,file = "Adapt_RL_control_script.R")
#read existing log (if exists) and add there a new log data
if(!file.exists(file.path(Path()$pathLog, paste0('time_executeM',timeFrame,'.rds')))){
write_rds(logs, file.path(Path()$pathLog, paste0('time_executeM',timeFrame,'.rds')))
} else {
read_rds(file.path(Path()$pathLog, paste0('time_executeM',timeFrame,'.rds'))) %>%
bind_rows(logs) %>%
write_rds(file.path(Path()$pathLog, paste0('time_executeM',timeFrame,'.rds')))
}
# uncomment to read the rds file created
# y <- read_rds(paste0("E:/trading/Git/R_tradecontrol/_RL2/control/8118201.rds"))
# packages used *** make sure to install these packages
library(tidyverse) #install.packages("tidyverse")
library(lubridate) #install.packages("lubridate")
library(ReinforcementLearning) #install.packages("ReinforcementLearning")
library(magrittr)
source("C:/DSS/Function/All_Path.R")
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
source("C:/DSS/Function/write_control_parameters.R")
source("C:/DSS/Function/log_RL_progress.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- PathT2()$pathT2
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# path with folder containing control parameters
path_control_files = Path()$controlFile
# -------------------------
# read data from trades in terminal 1
# -------------------------
# uncomment code below to test functionality without MT4 platform installed
DFT2 <- try(import_data(trade_log_file = Path()$ordersResultsT2.csv,
demo_mode = T),
silent = TRUE)
# -------------------------
# read data from trades in terminal 1
# -------------------------
# uncomment code below to test functionality without MT4 platform installed
DFT2 <- try(import_data(trade_log_file = Path()$ordersResultsT2,
demo_mode = T),
silent = TRUE)
DFT2 <- try(import_data(Path(), "OrdersResultsT2.csv"), silent = TRUE)
View(DFT2)
DFT2 <- try(import_data(Path(), "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT1 %$% MagicNumber %>% unique() %>% sort()
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
DFT2 <- try(import_data(Path()$ordersResultsT2), silent = TRUE)
DFT2 <- try(import_data(Path()$ordersResultsT2), silent = TRUE)
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
library(lazytrade)
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
# source("C:/DSS/Function/write_control_parameters.R")
source("C:/DSS/Function/log_RL_progress.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# path with folder containing control parameters
path_control_files = Path()$controlFile
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
rl_write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
# packages used *** make sure to install these packages
library(tidyverse) #install.packages("tidyverse")
library(lubridate) #install.packages("lubridate")
library(ReinforcementLearning) #install.packages("ReinforcementLearning")
library(magrittr)
library(lazytrade)
source("C:/DSS/Function/All_Path.R")
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
# source("C:/DSS/Function/write_control_parameters.R")
source("C:/DSS/Function/log_RL_progress.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# path with folder containing control parameters
path_control_files = Path()$controlFile
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
rl_write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
# This is a dedicated script for the Lazy Trading 4th Course: Statistical Analysis and Control of Trades
# Copyright (C) 2018 Vladimir Zhbanko
# Preferrably to be used only with the courses Lazy Trading see: https://vladdsm.github.io/myblog_attempt/index.html
# https://www.udemy.com/your-trading-control-reinforcement-learning/?couponCode=LAZYTRADE4-10
# PURPOSE: Adapt RL control parameters and write them to the file
# packages used *** make sure to install these packages
library(tidyverse) #install.packages("tidyverse")
library(lubridate) #install.packages("lubridate")
library(ReinforcementLearning) #install.packages("ReinforcementLearning")
library(magrittr)
library(lazytrade)
source("C:/DSS/Function/All_Path.R")
# ----------- Main Steps -----------------
# -- Read trading results from Terminal 1
# -- Use function find control parameters to write best RL control parameters for every trading robot
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
# source("C:/DSS/Function/write_control_parameters.R")
source("C:/DSS/Function/log_RL_progress.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# path with folder containing control parameters
path_control_files = Path()$controlFile
# -------------------------
# read data from trades in terminal 2
# -------------------------
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
rl_write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
### ============== END of FOR EVERY TRADING SYSTEM ###
# packages used *** make sure to install these packages
library(tidyverse)
library(lubridate)
library(ReinforcementLearning)
library(magrittr)
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
source("C:/DSS/Function/generate_RL_policy.R")
source("C:/DSS/Function/record_policy.R")
source("C:/DSS/Function/writeCommandViaCSV.R")
source("C:/DSS/Function/Adapt_RL_control.R")
source("C:/DSS/Function/All_Path.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 1 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# terminal 3 path *** make sure to customize this path
path_T3 <- Path()$pathT3
# path where to read control parameters from
path_control_files <- Path()$controlFile
timeFrame <- 5
# -------------------------
# read data from trades in terminal 2
# -------------------------
DFT2 <- try(import_data(path_T2, "OrdersResultsT2.csv"), silent = TRUE)
# -------------------------
# read data from trades in terminal 3
# -------------------------
DFT3 <- try(import_data(path_T3, "OrdersResultsT3.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarize number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
time_start <- Sys.time()
# Is searching for the best parameter using brut force
#------------------------------------------------
j <- 0
for (i in 1:length(vector_systems)) {
tryCatch({
#i<-1
trading_system <- vector_systems[i]
})
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
}
length(vector_systems)
Adapt_RL_control(DFT2,path_T2,path_control_files)
i<-8
#i<-8
trading_system <- vector_systems[i]
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
file.path(Path()$pathControlFile,paste0(trading_system,".rds")
)
paste0(trading_system,".rds")
file.path(Path()$pathControlFile,paste0(trading_system,".rds"))
i<-1
!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))
i<-5
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
df <-DF_Stats[order(DF_Stats$EntryTime),]
Terminals <- data.frame(id = 1:4, TermPath = c("C:/Program Files (x86)/AM MT4 - Terminal 1/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 2/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 3/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 4/MQL4/Files/"),
stringsAsFactors = F)
file_path <- paste0(Terminals[2,2],"OrdersResultsT",2,".csv")
DF_Stats <- read.csv(file_path(), col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
DF_Stats <- read.csv(file_path(), col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- read.csv(file_path, col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
})
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
df <-DF_Stats[order(DF_Stats$EntryTime),]
View(df)
View(DF_Stats)
DF_Stats <- read.csv(file_path, col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
View(DF_Stats)
df <-DF_Stats[order(DF_Stats$Profit),]
View(df)
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
View(DF_Stats)
df <-DF_Stats[order(DF_Stats$EntryTime),]
View(df)
df <-DF_Stats[order(Profit),]
runApp('Monitor')
DF_Stats[order(DF_Stats$Profit),]
runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
