# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
rl_write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
### ============== END of FOR EVERY TRADING SYSTEM ###
# packages used *** make sure to install these packages
library(tidyverse)
library(lubridate)
library(ReinforcementLearning)
library(magrittr)
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
source("C:/DSS/Function/generate_RL_policy.R")
source("C:/DSS/Function/record_policy.R")
source("C:/DSS/Function/writeCommandViaCSV.R")
source("C:/DSS/Function/Adapt_RL_control.R")
source("C:/DSS/Function/All_Path.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 1 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# terminal 3 path *** make sure to customize this path
path_T3 <- Path()$pathT3
# path where to read control parameters from
path_control_files <- Path()$controlFile
timeFrame <- 5
# -------------------------
# read data from trades in terminal 2
# -------------------------
DFT2 <- try(import_data(path_T2, "OrdersResultsT2.csv"), silent = TRUE)
# -------------------------
# read data from trades in terminal 3
# -------------------------
DFT3 <- try(import_data(path_T3, "OrdersResultsT3.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarize number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
time_start <- Sys.time()
# Is searching for the best parameter using brut force
#------------------------------------------------
j <- 0
for (i in 1:length(vector_systems)) {
tryCatch({
#i<-1
trading_system <- vector_systems[i]
})
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
}
length(vector_systems)
Adapt_RL_control(DFT2,path_T2,path_control_files)
i<-8
#i<-8
trading_system <- vector_systems[i]
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
file.path(Path()$pathControlFile,paste0(trading_system,".rds")
)
paste0(trading_system,".rds")
file.path(Path()$pathControlFile,paste0(trading_system,".rds"))
i<-1
!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))
i<-5
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
df <-DF_Stats[order(DF_Stats$EntryTime),]
Terminals <- data.frame(id = 1:4, TermPath = c("C:/Program Files (x86)/AM MT4 - Terminal 1/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 2/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 3/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 4/MQL4/Files/"),
stringsAsFactors = F)
file_path <- paste0(Terminals[2,2],"OrdersResultsT",2,".csv")
DF_Stats <- read.csv(file_path(), col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
DF_Stats <- read.csv(file_path(), col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- read.csv(file_path, col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
})
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
df <-DF_Stats[order(DF_Stats$EntryTime),]
View(df)
View(DF_Stats)
DF_Stats <- read.csv(file_path, col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
View(DF_Stats)
df <-DF_Stats[order(DF_Stats$Profit),]
View(df)
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
View(DF_Stats)
df <-DF_Stats[order(DF_Stats$EntryTime),]
View(df)
df <-DF_Stats[order(Profit),]
runApp('Monitor')
DF_Stats[order(DF_Stats$Profit),]
runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
install.packages(ploty)
install.packages("ploty")
install.packages("plotly")
install.packages("plotly")
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp()
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
devtools::install_github('ropensci/plotly')
devtools::install_github('ropensci/plotly')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
shiny::runApp('Monitor')
as.Vector(Stats()$symbol)
as.vector(Stats()$symbol)
as.vector(DF_Stats$symbol)
DF_Stats
DF_Stats$symbol
as.vector(DF_Stats$Symbol)
unique(DF_Stats$Symbol)
as.vector(unique(Stats$Symbol))
as.vector(unique(DF_Stats$Symbol))
pair <- as.vector(unique(DF_Stats$Symbol))
length(pair)
group_by(DF_Stats,Symbol)
test1 <- 1
for(i in length(pair)){
xi <- i
}
filter(DF_Stats,DF_Stats$pair[1])
pair
pair[1]
filter(DF_Stats,DF_Stats$Symbol == pair[1])
runApp('Monitor')
for(i in length(pair)){
x_i <- paste0("x",i)
assign(x_i, filter(DF_Stats,DF_Stats$Symbol == pair[i]))
}
for(i in length(pair)){
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
}
View(x6)
View(x6)
i <- 1
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
i <- 2
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
for(i in length(pair)){
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
}
for(i in length(pair)){
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
print(i)
}
for(i in length(pair)){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1 :length(pair)){
print(i)
}
runApp('Monitor')
as.vector(DF_Stats%>%group_by(DF_Stats$Symbol)%>%select(Symbol)%>%unique())
pair <- as.vector(DF_Stats%>%group_by(DF_Stats$Symbol)%>%select(Symbol)%>%unique())
runApp('Monitor')
shiny::runApp('Monitor')
install.packages("randomcoloR")
runApp('Monitor')
runApp('Monitor')
for(i in 2:10){}
for(i in 2:10){print(i)}
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
Terminals <- normalizePath(Sys.getenv(paste0('PATH_T2'), winslash = '/')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
#path to user repo:
#!!!Change this path!!!
#path_user <- "C:/DSS_Bot/DSS_R"
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
Terminals <- normalizePath(Sys.getenv(paste0('PATH_T1')), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv(PATH_T1), winslash = '/')
Terminals <- normalizePath(Sys.getenv("PATH_T1"), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
runApp('Monitor')
runApp('Monitor')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
shiny::runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
Terminals <- normalizePath(Sys.getenv('PATH_T1', winslash = '/')
)
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
file_path <- paste0(Terminals,"/OrdersResultsT",input$Terminal,".csv")
file_path <- paste0(Terminals,"/OrdersResultsT",1,".csv")
DF_Stats <- read.csv(file_path(), col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- read.csv(file_path, col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
View(DF_Stats)
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo"),
ExitTime = as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo"),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
shiny::runApp('Monitor')
View(DF_Stats)
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
file_path <- paste0(pathDSS,"/analyse_resultM60",input$Terminal,".csv")
file_path <- paste0(pathDSS,"/analyse_resultM60.csv")
DF_Result <- read.csv(file_path, col.names = c("TR_Level","NB_hold","Symbol","MaxPerf","FrstQntlPerf"))
file_path <- paste0(pathDSS,"_DATA/analyse_resultM60.csv")
DF_Result <- read.csv(file_path, col.names = c("TR_Level","NB_hold","Symbol","MaxPerf","FrstQntlPerf"))
file_path <- paste0(pathDSS,"/_DATA/analyse_resultM60.csv")
DF_Result <- read.csv(file_path, col.names = c("TR_Level","NB_hold","Symbol","MaxPerf","FrstQntlPerf"))
View(DF_Result)
runApp('Monitor')
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
runApp('Monitor')
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
file_path <- paste0(pathDSS,"/_DATA/analyse_resultM60_data.csv")
DF_DataResult <- read.csv(file_path, col.names = c("PnL_NB","TotalTrades","TR_Level","NB_hold","Symbol","FinalOutCome"))
runApp('Monitor')
pathDSS <- normalizePath(Sys.getenv("PATH_DSS"), winslash = '/')
source(paste0(pathDSS,"/_LOGS/analyse_resultsM60.R"))
paste0(pathDSS,"/_LOGS/analyse_resultsM60.R")
runApp('Monitor')
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_logs <- file.path(path_user, "_MODELS")
filesToAnalyse <-list.files(path = path_logs,
pattern = "-60.rds",
full.names=TRUE)
for (VAR in filesToAnalyse) {
# VAR <- filesToAnalyse[1]
if(!exists("dfres")){dfres <- readr::read_rds(VAR)}  else {
dfres <- readr::read_rds(VAR) %>% dplyr::bind_rows(dfres)
}
}
dfres
runApp('Monitor')
runApp('Monitor')
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_logs <- file.path(path_user, "_MODELS")
# file names
filesToAnalyse <-list.files(path = path_logs,
pattern = "-60.rds",
full.names=TRUE)
# aggregate all files into one
for (VAR in filesToAnalyse) {
# VAR <- filesToAnalyse[1]
if(!exists("dfres")){dfres <<- readr::read_rds(VAR)}  else {
dfres <<- readr::read_rds(VAR) %>% dplyr::bind_rows(dfres)
}
}
filesToAnalyse1 <-list.files(path = path_logs,
pattern = "M60.csv",
full.names=TRUE)
for (VAR in filesToAnalyse1) {
# VAR <- filesToAnalyse1[1]
if(!exists("dfres1")){dfres1 <<- readr::read_csv(VAR)}  else {
dfres1 <<- readr::read_csv(VAR) %>% dplyr::bind_rows(dfres1)
}
}
runApp('Monitor')
source("C:/DSS_Bot/DSS_R/_LOGS/analyse_resultsM60.R")
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_logs <- file.path(path_user, "_MODELS")
# file names
filesToAnalyse <-list.files(path = path_logs,
pattern = "-60.rds",
full.names=TRUE)
# aggregate all files into one
for (VAR in filesToAnalyse) {
# VAR <- filesToAnalyse[1]
if(!exists("dfres")){dfres <<- readr::read_rds(VAR)}  else {
dfres <<- readr::read_rds(VAR) %>% dplyr::bind_rows(dfres)
}
}
## Analysis of model quality records
# file names
filesToAnalyse1 <-list.files(path = path_logs,
pattern = "M60.csv",
full.names=TRUE)
# aggregate all files into one
for (VAR in filesToAnalyse1) {
# VAR <- filesToAnalyse1[1]
if(!exists("dfres1")){dfres1 <<- readr::read_csv(VAR)}  else {
dfres1 <<- readr::read_csv(VAR) %>% dplyr::bind_rows(dfres1)
}
}
write.csv(dfres1,paste0(path_user,"/_DATA/analyse_resultM60.csv"), row.names=FALSE)
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_logs <- file.path(path_user, "_MODELS")
# file names
filesToAnalyse <-list.files(path = path_logs,
pattern = "-60.rds",
full.names=TRUE)
# aggregate all files into one
for (VAR in filesToAnalyse) {
# VAR <- filesToAnalyse[1]
if(!exists("dfres")){dfres <- readr::read_rds(VAR)}  else {
dfres <- readr::read_rds(VAR) %>% dplyr::bind_rows(dfres)
}
}
## Analysis of model quality records
# file names
filesToAnalyse1 <-list.files(path = path_logs,
pattern = "M60.csv",
full.names=TRUE)
readr::read_rds(VAR)
# VAR <- filesToAnalyse[1]
if(!exists("dfres")){dfres <- readr::read_rds(VAR)}  else {
dfres <- readr::read_rds(VAR) %>% dplyr::bind_rows(dfres)
}
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_logs <- file.path(path_user, "_MODELS")
# file names
filesToAnalyse <-list.files(path = path_logs,
pattern = "-60.rds",
full.names=TRUE)
# aggregate all files into one
for (VAR in filesToAnalyse) {
# VAR <- filesToAnalyse[1]
if(!exists("dfres")){dfres <- readr::read_rds(VAR)}  else {
dfres <- readr::read_rds(VAR) %>% dplyr::bind_rows(dfres)
}
}
## Analysis of model quality records
# file names
filesToAnalyse1 <-list.files(path = path_logs,
pattern = "M60.csv",
full.names=TRUE)
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
path_data <- file.path(path_user, "_DATA")
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
n_rows <- reactiveValues(c = nrow(macd_ai))
runApp('Monitor')
runApp('Monitor')
runApp()
runApp('Monitor')
#path to user repo:
#!!!Change this path!!!
#path_user <- "C:/DSS_Bot/DSS_R"
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
#global.r
#read dataset
library(readr)
#path to user repo:
#!!!Change this path!!!
#path_user <- "C:/DSS_Bot/DSS_R"
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
#function to get data for this App to work
get_data <- function(){
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
return(macd_ai)}
#use this function
macd_ai <- get_data()
runApp('Monitor')
readr::write_rds(x, file.path(path_data, 'macd_ai_classified.rds'))
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
#function to get data for this App to work
#get_data <- function(){
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
#path to user repo:
#!!!Change this path!!!
#path_user <- "C:/DSS_Bot/DSS_R"
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
#function to get data for this App to work
#get_data <- function(){
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
runApp('Monitor')
runApp('Monitor')
runApp()
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
runApp('Monitor')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='stufflow',
token='B2CF01594550BF545F5036F19AB4E579',
secret='P/luHe0wvHXGQBMLzM4DN8MXp7f10m3H02dPnDIP')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
pathDSS <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp()
runApp('Monitor')
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
path_data <- file.path(path_user, "_DATA")
macd_ai <- readr::read_rds(file.path(path_data, 'macd_ai_classified.rds'))
runApp('Monitor')
View(macd_ai)
runApp('Monitor')
df <- tibble::tibble(M_T = 'BUN')
View(df)
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
