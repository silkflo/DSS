DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
library(lazytrade)
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
# source("C:/DSS/Function/write_control_parameters.R")
source("C:/DSS/Function/log_RL_progress.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# path with folder containing control parameters
path_control_files = Path()$controlFile
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
rl_write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
# packages used *** make sure to install these packages
library(tidyverse) #install.packages("tidyverse")
library(lubridate) #install.packages("lubridate")
library(ReinforcementLearning) #install.packages("ReinforcementLearning")
library(magrittr)
library(lazytrade)
source("C:/DSS/Function/All_Path.R")
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
# source("C:/DSS/Function/write_control_parameters.R")
source("C:/DSS/Function/log_RL_progress.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# path with folder containing control parameters
path_control_files = Path()$controlFile
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
rl_write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
# This is a dedicated script for the Lazy Trading 4th Course: Statistical Analysis and Control of Trades
# Copyright (C) 2018 Vladimir Zhbanko
# Preferrably to be used only with the courses Lazy Trading see: https://vladdsm.github.io/myblog_attempt/index.html
# https://www.udemy.com/your-trading-control-reinforcement-learning/?couponCode=LAZYTRADE4-10
# PURPOSE: Adapt RL control parameters and write them to the file
# packages used *** make sure to install these packages
library(tidyverse) #install.packages("tidyverse")
library(lubridate) #install.packages("lubridate")
library(ReinforcementLearning) #install.packages("ReinforcementLearning")
library(magrittr)
library(lazytrade)
source("C:/DSS/Function/All_Path.R")
# ----------- Main Steps -----------------
# -- Read trading results from Terminal 1
# -- Use function find control parameters to write best RL control parameters for every trading robot
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
# source("C:/DSS/Function/write_control_parameters.R")
source("C:/DSS/Function/log_RL_progress.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# path with folder containing control parameters
path_control_files = Path()$controlFile
# -------------------------
# read data from trades in terminal 2
# -------------------------
DFT2 <- try(import_data(Path()$pathT2, "OrdersResultsT2.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarise number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
### ============== FOR EVERY TRADING SYSTEM ###
for (i in 1:length(vector_systems)) {
# tryCatch() function will not abort the entire for loop in case of the error in one iteration
tryCatch({
# execute this code below for debugging:
# i <- 7 #policy off
# i <- 2 #policy on
# extract current magic number id
trading_system <- vector_systems[i]
# get trading summary data only for one system
trading_systemDF <- DFT2 %>% filter(MagicNumber == trading_system)
## -- Go to the next Loop iteration if there is too little trades! -- ##
if(nrow(trading_systemDF) < 5) { next }
#==============================================================================
# Define state and action sets for Reinforcement Learning
states <- c("tradewin", "tradeloss")
actions <- c("ON", "OFF") # 'ON' and 'OFF' are referring to decision to trade with Slave system
# Define reinforcement learning parameters (see explanation below or in vignette)
# -----
# alpha - learning rate      0.1 <- slow       | fast        -> 0.9
# gamma - reward rate        0.1 <- short term | long term   -> 0.9
# epsilon - sampling rate    0.1 <- high sample| low sample  -> 0.9
# iter
# -----
# to uncomment desired learning parameters:
# NOTE: more research is required to find best parameters TDL TDL TDL
#control <- list(alpha = 0.5, gamma = 0.5, epsilon = 0.5)
#control <- list(alpha = 0.9, gamma = 0.9, epsilon = 0.9)
#control <- list(alpha = 0.7, gamma = 0.5, epsilon = 0.9)
#control <- list(alpha = 0.3, gamma = 0.6, epsilon = 0.1)
# or to use optimal control parameters found by auxiliary function
rl_write_control_parameters(trading_systemDF,
path_control_files = path_control_files)
#cntrl <- read_rds(paste0(path_control_files, "/", trading_system, ".rds"))
#cntrl <- read_rds(paste0(path_control_files, "/", 8139106, ".rds"))
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
### ============== END of FOR EVERY TRADING SYSTEM ###
# packages used *** make sure to install these packages
library(tidyverse)
library(lubridate)
library(ReinforcementLearning)
library(magrittr)
# ----------------
# Used Functions (to make code more compact). See detail of each function in the repository
#-----------------
# *** make sure to customize this path
source("C:/DSS/Function/import_data.R")
source("C:/DSS/Function/generate_RL_policy.R")
source("C:/DSS/Function/record_policy.R")
source("C:/DSS/Function/writeCommandViaCSV.R")
source("C:/DSS/Function/Adapt_RL_control.R")
source("C:/DSS/Function/All_Path.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 1 path *** make sure to customize this path
path_T2 <- Path()$pathT2
# terminal 3 path *** make sure to customize this path
path_T3 <- Path()$pathT3
# path where to read control parameters from
path_control_files <- Path()$controlFile
timeFrame <- 5
# -------------------------
# read data from trades in terminal 2
# -------------------------
DFT2 <- try(import_data(path_T2, "OrdersResultsT2.csv"), silent = TRUE)
# -------------------------
# read data from trades in terminal 3
# -------------------------
DFT3 <- try(import_data(path_T3, "OrdersResultsT3.csv"), silent = TRUE)
# Vector with unique Trading Systems
vector_systems <- DFT2 %$% MagicNumber %>% unique() %>% sort()
# For debugging: summarize number of trades to see desired number of trades was achieved
DFT2_sum <- DFT2 %>%
group_by(MagicNumber) %>%
summarise(Num_Trades = n(),
Mean_profit = sum(Profit)) %>%
arrange(desc(Num_Trades))
time_start <- Sys.time()
# Is searching for the best parameter using brut force
#------------------------------------------------
j <- 0
for (i in 1:length(vector_systems)) {
tryCatch({
#i<-1
trading_system <- vector_systems[i]
})
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
}
length(vector_systems)
Adapt_RL_control(DFT2,path_T2,path_control_files)
i<-8
#i<-8
trading_system <- vector_systems[i]
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
file.path(Path()$pathControlFile,paste0(trading_system,".rds")
)
paste0(trading_system,".rds")
file.path(Path()$pathControlFile,paste0(trading_system,".rds"))
i<-1
!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))
i<-5
if(!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))){
j <- j+1
}
!file.exists(file.path(Path()$pathControlFile,paste0(trading_system,".rds")))
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
df <-DF_Stats[order(DF_Stats$EntryTime),]
Terminals <- data.frame(id = 1:4, TermPath = c("C:/Program Files (x86)/AM MT4 - Terminal 1/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 2/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 3/MQL4/Files/",
"C:/Program Files (x86)/AM MT4 - Terminal 4/MQL4/Files/"),
stringsAsFactors = F)
file_path <- paste0(Terminals[2,2],"OrdersResultsT",2,".csv")
DF_Stats <- read.csv(file_path(), col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
DF_Stats <- read.csv(file_path(), col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- read.csv(file_path, col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
})
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
df <-DF_Stats[order(DF_Stats$EntryTime),]
View(df)
View(DF_Stats)
DF_Stats <- read.csv(file_path, col.names = c("MagicNumber","Ticket","EntryTime","ExitTime","Profit","Symbol","Type"))
View(DF_Stats)
df <-DF_Stats[order(DF_Stats$Profit),]
View(df)
DF_Stats <- data.frame(MagicNumber = DF_Stats$MagicNumber,
Ticket = DF_Stats$Ticket,
EntryTime = as.character(as.POSIXct(DF_Stats$EntryTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
ExitTime = as.character(as.POSIXct(DF_Stats$ExitTime, format = "%Y.%m.%d %H:%M:%S", tz = "Africa/Cairo")),
Profit = DF_Stats$Profit,
Symbol = DF_Stats$Symbol,
Type = DF_Stats$Type)
View(DF_Stats)
df <-DF_Stats[order(DF_Stats$EntryTime),]
View(df)
df <-DF_Stats[order(Profit),]
runApp('Monitor')
DF_Stats[order(DF_Stats$Profit),]
runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
shiny::runApp('Monitor')
runApp('Monitor')
install.packages(ploty)
install.packages("ploty")
install.packages("plotly")
install.packages("plotly")
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp()
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
devtools::install_github('ropensci/plotly')
devtools::install_github('ropensci/plotly')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
shiny::runApp('Monitor')
as.Vector(Stats()$symbol)
as.vector(Stats()$symbol)
as.vector(DF_Stats$symbol)
DF_Stats
DF_Stats$symbol
as.vector(DF_Stats$Symbol)
unique(DF_Stats$Symbol)
as.vector(unique(Stats$Symbol))
as.vector(unique(DF_Stats$Symbol))
pair <- as.vector(unique(DF_Stats$Symbol))
length(pair)
group_by(DF_Stats,Symbol)
test1 <- 1
for(i in length(pair)){
xi <- i
}
filter(DF_Stats,DF_Stats$pair[1])
pair
pair[1]
filter(DF_Stats,DF_Stats$Symbol == pair[1])
runApp('Monitor')
for(i in length(pair)){
x_i <- paste0("x",i)
assign(x_i, filter(DF_Stats,DF_Stats$Symbol == pair[i]))
}
for(i in length(pair)){
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
}
View(x6)
View(x6)
i <- 1
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
i <- 2
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
for(i in length(pair)){
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
}
for(i in length(pair)){
assign(paste0("x",i), filter(DF_Stats,DF_Stats$Symbol == pair[i]))
print(i)
}
for(i in length(pair)){
print(i)
}
for(i in 1:10){
print(i)
}
for(i in 1 :length(pair)){
print(i)
}
runApp('Monitor')
as.vector(DF_Stats%>%group_by(DF_Stats$Symbol)%>%select(Symbol)%>%unique())
pair <- as.vector(DF_Stats%>%group_by(DF_Stats$Symbol)%>%select(Symbol)%>%unique())
runApp('Monitor')
shiny::runApp('Monitor')
install.packages("randomcoloR")
runApp('Monitor')
runApp('Monitor')
for(i in 2:10){}
for(i in 2:10){print(i)}
shiny::runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
Terminals <- normalizePath(Sys.getenv(paste0('PATH_T2'), winslash = '/')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
runApp('Monitor')
#path to user repo:
#!!!Change this path!!!
#path_user <- "C:/DSS_Bot/DSS_R"
path_user <- normalizePath(Sys.getenv('PATH_DSS'), winslash = '/')
runApp('Monitor')
runApp('Monitor')
shiny::runApp('Monitor')
Terminals <- normalizePath(Sys.getenv(paste0('PATH_T1')), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv(PATH_T1), winslash = '/')
Terminals <- normalizePath(Sys.getenv("PATH_T1"), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
runApp('Monitor')
runApp('Monitor')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
Terminals <- normalizePath(Sys.getenv('PATH_T1'), winslash = '/')
shiny::runApp('Monitor')
