# ----------------------------------------------------------------------------------------
# R Script to score the latest asset indicator data against Deep Learning model
# ----------------------------------------------------------------------------------------
# (C) 2019, 2021 Vladimir Zhbanko
# https://www.udemy.com/course/self-learning-trading-robot/?referralCode=B95FC127BA32DA5298F4
#
# start_run <- Sys.time()
# load libraries to use and custom functions
library(dplyr)
library(readr)
library(lubridate)
library(h2o)
library(magrittr)
library(lazytrade)
source("C:/DSS/Function/All_Path.R")
source("C:/DSS/Function/aml_consolidate_results.R")

timeFrame <-5
#path to user repo:
#!!!Change this path!!! 
path_user <- Path()$selfLearning

#### definition of paths and variables ==========================================
path_new_data <- Path()$pathT2
path_hist_data <- file.path(path_user, "_DATA")

#absolute path to store model objects (useful when scheduling tasks)
path_model <- file.path(path_user, "_MODELS")

# load prices of 28 currencies
path_sbxm <- Path()$pathT2
path_sbxs <- Path()$pathT3

# Vector of currency pairs
Pairs = c("EURUSD", "GBPUSD", "AUDUSD", "NZDUSD", "USDCAD", "USDCHF", "USDJPY",
          "EURGBP", "EURJPY", "EURCHF", "EURNZD", "EURCAD", "EURAUD", "GBPAUD",
          "GBPCAD", "GBPCHF", "GBPJPY", "GBPNZD", "AUDCAD", "AUDCHF", "AUDJPY",
          "AUDNZD", "CADJPY", "CHFJPY", "NZDJPY", "NZDCAD", "NZDCHF", "CADCHF")   

# Find number of bars since the last model update


# initialize the virtual machine
h2o.init(nthreads = 1)

for (PAIR in Pairs) {
  ## PAIR <- "EURUSD"
  
  #  test strategy [experimental]!
  #aml_test_strategy
  aml_test_model(symbol = PAIR,
                 num_bars = 50,
                 timeframe = timeFrame,
                 path_model = path_model,
                 path_data = path_hist_data,
                 path_sbxm = path_sbxm,
                 path_sbxs = path_sbxs)
  
  
 # aml_test_model(symbol = PAIR,
 #                num_bars = 50,
 #                timeframe = timeFrame2,
 #                path_model = path_model,
 #                path_data = path_hist_data,
 #                path_sbxm = path_sbxm,
 #                path_sbxs = path_sbxs)
 # 
  aml_score_data(symbol = PAIR,
                 timeframe = timeFrame,
                 path_model = path_model,
                 path_data = path_new_data,
                 path_sbxm = path_sbxm,
                 path_sbxs = path_sbxs)
  
  #aml_score_data(symbol = PAIR,
  #               timeframe = timeFrame2,
  #               path_model = path_model,
  #               path_data = path_new_data,
  #               path_sbxm = path_sbxm,
  #               path_sbxs = path_sbxs)  
  #
  
}

# shutdown h2o
h2o.shutdown(prompt = F)

# outcome is series of files written to the sandboxes of each terminals


# functions to consolidate results and write that to the files
aml_consolidate_results(timeframe = timeFrame,
                        used_symbols = Pairs,
                        path_model = path_model,path_sbxm = path_sbxm,path_sbxs = path_sbxs,
                        min_quality = 0.75)
# aml_consolidate_results(timeframe = timeFrame2,
#                         used_symbols = Pairs,
#                         path_model = path_model,path_sbxm = path_sbxm,path_sbxs = path_sbxs,
#                         min_quality = 0.75)
# 
# end_run <- Sys.time()
# tot_run <- end_run - start_run