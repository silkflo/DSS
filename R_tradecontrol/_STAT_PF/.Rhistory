# packages used *** make sure to install these packages
library(tidyverse) #install.packages("tidyverse")
library(lubridate) #install.packages("lubridate")
# -- Pass: Data object DFT1 contains observations
# -- Pass: xxx
# -- Pass: Files SystemControlXXXXXXX.csv are generated in the Terminal 3 sandbox
# -- Pass: If file "01_MacroeconomicEvent.csv" exists trade policy is overwritten
# -- Fail: DFT1 class 'try-error'
# -- Fail: xxx
# ----------------
# Used Functions
#-----------------
# *** make sure to customize this path
source("E:/trading/Git/R_tradecontrol/import_data.R")
source("E:/trading/Git/R_tradecontrol/get_profit_factorDF.R")
source("E:/trading/Git/R_tradecontrol/writeCommandViaCSV.R")
# -------------------------
# Define terminals path addresses, from where we are going to read/write data
# -------------------------
# terminal 2 path *** make sure to customize this path
#(when run in live instead of EA path might be ./MQL4/Files)
path_T2 <- "C:/Program Files (x86)/AM MT4 - Terminal 2/tester/Files/"
# terminal 3 path *** make sure to customize this path
path_T3 <- "C:/Program Files (x86)/AM MT4 - Terminal 3/tester/Files/"
DFT2 <- try(import_data(path_T2, "OrdersResultsT2.csv"),silent = TRUE)
# get last 10 trades for each Magic system and arrange orders to have descending order
DFT2_L <- DFT2 %>%  # filtered to contain last 10 orders for each system
group_by(MagicNumber) %>%
arrange(MagicNumber, desc(OrderCloseTime)) %>%
filter(row_number() <= 11) # +1 for the function to work
# ----------------
# Implementation of logic
#-----------------
#### SORTING AND DECIDE TRADING ON THE DEMO ACCOUNT #### -----------------------------
# DEMO always allow trades in Terminal 2
DFT2_L %>%
group_by(MagicNumber) %>%
summarise(nOrders = n()) %>%
select(MagicNumber) %>%
mutate(IsEnabled = 1) %>%
# Write command "allow"
writeCommandViaCSV(path_T2)
#### DECIDE IF TRADING ON THE T3 ACCOUNT #### -----------------------------
# Last 10 orders on DEMO && pr.fact >= 2 start trade T3
DFT2_L %>%
get_profit_factorDF(10) %>%
ungroup() %>%
filter(PrFact >= 1.2) %>%
select(MagicNumber) %>%
mutate(MagicNumber = MagicNumber + 200, IsEnabled = 1) %>%
# Write command "allow"
writeCommandViaCSV(path_T3)
#### DECIDE IF NOT TO TRADING ON THE T3 ACCOUNT #### -----------------------------
# 4. Last 10 orders on DEMO && pr.fact < 1.6 stop trade T3
DFT2_L %>%
get_profit_factorDF(10) %>%
ungroup() %>%
filter(PrFact < 1.6) %>%
select(MagicNumber) %>%
mutate(MagicNumber = MagicNumber + 200, IsEnabled = 0) %>%
# Write command "allow"
writeCommandViaCSV(path_T3)
#write_rds(DFT1_L, "test_data_profit_factorDF.rds")
##========================================
# -------------------------
# read data from trades in terminal 3
# -------------------------
DFT3 <- try(import_data(path_T3, "OrdersResultsT3.csv"),silent = TRUE)
# -------------------------
# -------------------------
# stopping all systems when macroeconomic event is present
# -------------------------
# stopping all systems when macroeconomic event is present
# this will be covered in the Course #5 of the Lazy Trading Series!
# -------------------------
# stopping all systems when macroeconomic event is present
# this will be covered in the Course #5 of the Lazy Trading Series!
# -------------------------
# -------------------------
# stopping all systems when macroeconomic event is present
# this will be covered in the Course #5 of the Lazy Trading Series!
# -------------------------
##========================================
# -------------------------
# stopping all systems when macroeconomic event is present
# this will be covered in the Course #5 of the Lazy Trading Series!
# -------------------------
##========================================
# -------------------------
# -------------------------
# stopping all systems when macroeconomic event is present
# this will be covered in the Course #5 of the Lazy Trading Series!
# -------------------------
##========================================
# -------------------------
# stopping all systems when macroeconomic event is present
# -------------------------
# stopping all systems when macroeconomic event is present
# this will be covered in the Course #5 of the Lazy Trading Series!
# -------------------------
##========================================
# -------------------------
# stopping all systems when macroeconomic event is present
# this will be covered in the Course #5 of the Lazy Trading Series!
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#if(file.exists(file.path(path_T1, "01_MacroeconomicEvent.csv"))){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#  DF_NT <- read_csv(file= file.path(path_T1, "01_MacroeconomicEvent.csv"), col_types = "i")
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#  if(DF_NT[1,1] == 1) {
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#    # disable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#
#  }
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#
#  }
#  # enable systems of T1 in case they were disabled previously
#        writeCommandViaCSV(path_T1)}
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 0) %>%
#        writeCommandViaCSV(path_T3)}
#
#
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        writeCommandViaCSV(path_T3)}
#
#
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#
#
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#  }
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#  # enable systems of T1 in case they were disabled previously
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#  if(DF_NT[1,1] == 0) {
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#    # enable trades
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#    if(!class(DFT1)[1]=='try-error'){
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        writeCommandViaCSV(path_T3)}
#      DFT1 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        writeCommandViaCSV(path_T3)}
#
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        writeCommandViaCSV(path_T3)}
#
#  }
#        # write commands to disable systems
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        writeCommandViaCSV(path_T3)}
#
#  }
#
#        writeCommandViaCSV(path_T1)}
#    # in this algorithm SystemControl file must be enabled in case there are no MacroEconomic Event
#    if(!class(DFT3)[1]=='try-error'){
#      DFT3 %>%
#        group_by(MagicNumber) %>% select(MagicNumber) %>% mutate(IsEnabled = 1) %>%
#        writeCommandViaCSV(path_T3)}
#
#  }
#
#}
source("E:/trading/Git/R_tradecontrol/_RL2/record_policy.R")
View(record_policy)
